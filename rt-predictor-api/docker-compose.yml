version: '3.8'

services:
  rt-predictor-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rt-predictor-api
    ports:
      - "50051:50051"  # gRPC port
      - "8181:8181"    # Metrics port
    environment:
      - PYTHONUNBUFFERED=1
      - CONFIG_PATH=/app/configs/config.toml
      - MODEL_PATH=/app/models/production
      - LOG_LEVEL=INFO
      - GRPC_PORT=50051
      - METRICS_PORT=8181
    volumes:
      # Mount model directory
      - ./models:/app/models:ro
      # Mount configs
      - ./configs:/app/configs:ro
      # Mount logs
      - ./logs:/app/logs
    networks:
      - rt-predictor-network
    healthcheck:
      test: ["CMD", "python", "/app/scripts/test_client.py", "--test", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Optional: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: rt-predictor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - rt-predictor-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rt-predictor-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - rt-predictor-network
    profiles:
      - monitoring

networks:
  rt-predictor-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
