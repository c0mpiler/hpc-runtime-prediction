version: '3.8'

services:
  # Training Service - Run manually or on schedule
  rt-predictor-training:
    build:
      context: ./rt-predictor-training
      dockerfile: Dockerfile
    container_name: rt-predictor-training
    volumes:
      - ./rt-predictor-training/data:/app/data
      - ./rt-predictor-training/configs:/app/configs
      - shared-models:/app/models
    networks:
      - rt-predictor-network
    environment:
      - PYTHONUNBUFFERED=1
    profiles:
      - training  # Only run when explicitly requested

  # API Service
  rt-predictor-api:
    build:
      context: ./rt-predictor-api
      dockerfile: Dockerfile
    container_name: rt-predictor-api
    ports:
      - "50051:50051"  # gRPC port
      - "8181:8181"    # Metrics port
    volumes:
      - ./rt-predictor-api/configs:/app/configs:ro
      - shared-models:/app/models:ro
      - ./rt-predictor-api/logs:/app/logs
    networks:
      - rt-predictor-network
    environment:
      - PYTHONUNBUFFERED=1
      - MODEL_PATH=/app/models/best_model.pkl
      - FEATURE_ENGINEER_PATH=/app/models/feature_engineer.pkl
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=:50051"]
      interval: 30s
      timeout: 10s
      retries: 3

  # UI Service
  rt-predictor-ui:
    build:
      context: ./rt-predictor-ui
      dockerfile: Dockerfile
    container_name: rt-predictor-ui
    ports:
      - "8501:8501"  # Streamlit port
    volumes:
      - ./rt-predictor-ui/configs:/app/configs:ro
      - ./rt-predictor-ui/logs:/app/logs
    networks:
      - rt-predictor-network
    environment:
      - PYTHONUNBUFFERED=1
      - RT_PREDICTOR_API_HOST=rt-predictor-api
      - RT_PREDICTOR_API_PORT=50051
    depends_on:
      - rt-predictor-api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: rt-predictor-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - rt-predictor-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rt-predictor-grafana
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana-data:/var/lib/grafana
    networks:
      - rt-predictor-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  rt-predictor-network:
    driver: bridge

volumes:
  shared-models:
  prometheus-data:
  grafana-data:
